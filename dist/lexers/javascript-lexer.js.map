{"version":3,"file":"javascript-lexer.js","names":["BaseLexer","ts","JavascriptLexer","_BaseLexer","_inherits","_super","_createSuper","_this","options","arguments","length","undefined","_classCallCheck","call","callPattern","functionPattern","functions","namespaceFunctions","attr","parseGenerics","typeMap","_createClass","key","value","createCommentNodeParser","_this2","visitedComments","Set","keys","node","content","forEachLeadingCommentRange","getFullStart","pos","end","kind","commentId","concat","SyntaxKind","MultiLineCommentTrivia","SingleLineCommentTrivia","has","add","text","slice","commentKeys","commentExtractor","push","apply","_toConsumableArray","setNamespaces","_this3","defaultNamespace","map","entry","_objectSpread","namespace","setKeyPrefixes","_this4","keyPrefix","extract","_this5","filename","parseCommentNode","parseTree","ArrowFunction","FunctionDeclaration","functionParamExtractor","TaggedTemplateExpression","taggedTemplateExpressionExtractor","CallExpression","expressionExtractor","forEachChild","sourceFile","createSourceFile","ScriptTarget","Latest","_this6","tFunctionParam","parameters","find","param","name","Identifier","includes","type","typeName","typeArguments","LiteralType","literal","tag","template","isTranslationFunction","NoSubstitutionTemplateLiteral","TemplateExpression","emit","_this7","expression","escapedText","_node$arguments$","elements","optionsArgument","ObjectLiteralExpression","properties","p","keyPrefixValue","initializer","keyArgument","shift","StringLiteral","BinaryExpression","concatenatedString","concatenateString","typeArgument","parseTypeArgument","typeArg","TypeLiteral","_iterator","_createForOfIteratorHelper","members","_step","s","n","done","member","err","e","f","TypeReference","Object","assign","Array","isArray","types","forEach","tp","defaultValue","_iterator2","_step2","SpreadAssignment","TrueKeyword","FalseKeyword","ns","_typeof","commentText","_this8","regexp","RegExp","expressions","match","expressionKeys","binaryExpression","string","operatorToken","PlusToken","left","right","default"],"sources":["../../src/lexers/javascript-lexer.js"],"sourcesContent":["import BaseLexer from './base-lexer.js'\r\nimport ts from 'typescript'\r\n\r\nexport default class JavascriptLexer extends BaseLexer {\r\n  constructor(options = {}) {\r\n    super(options)\r\n\r\n    this.callPattern = '(?<=^|\\\\s|\\\\.)' + this.functionPattern() + '\\\\(.*\\\\)'\r\n    this.functions = options.functions || ['t']\r\n    this.namespaceFunctions = options.namespaceFunctions || [\r\n      'useTranslation',\r\n      'withTranslation',\r\n    ]\r\n    this.attr = options.attr || 'i18nKey'\r\n    this.parseGenerics = options.parseGenerics || false\r\n    this.typeMap = options.typeMap || {}\r\n  }\r\n\r\n  createCommentNodeParser() {\r\n    const visitedComments = new Set()\r\n\r\n    return (keys, node, content) => {\r\n      ts.forEachLeadingCommentRange(\r\n        content,\r\n        node.getFullStart(),\r\n        (pos, end, kind) => {\r\n          const commentId = `${pos}_${end}`\r\n          if (\r\n            (kind === ts.SyntaxKind.MultiLineCommentTrivia ||\r\n              kind === ts.SyntaxKind.SingleLineCommentTrivia) &&\r\n            !visitedComments.has(commentId)\r\n          ) {\r\n            visitedComments.add(commentId)\r\n            const text = content.slice(pos, end)\r\n            const commentKeys = this.commentExtractor.call(this, text)\r\n            if (commentKeys) {\r\n              keys.push(...commentKeys)\r\n            }\r\n          }\r\n        }\r\n      )\r\n    }\r\n  }\r\n\r\n  setNamespaces(keys) {\r\n    if (this.defaultNamespace) {\r\n      return keys.map((entry) => ({\r\n        ...entry,\r\n        namespace: entry.namespace || this.defaultNamespace,\r\n      }))\r\n    }\r\n\r\n    return keys\r\n  }\r\n\r\n  setKeyPrefixes(keys) {\r\n    if (this.keyPrefix) {\r\n      return keys.map((key) => ({\r\n        ...key,\r\n        keyPrefix: this.keyPrefix,\r\n      }))\r\n    }\r\n\r\n    return keys\r\n  }\r\n\r\n  extract(content, filename = '__default.js') {\r\n    const keys = []\r\n\r\n    const parseCommentNode = this.createCommentNodeParser()\r\n\r\n    const parseTree = (node) => {\r\n      let entry\r\n\r\n      parseCommentNode(keys, node, content)\r\n\r\n      if (\r\n        node.kind === ts.SyntaxKind.ArrowFunction ||\r\n        node.kind === ts.SyntaxKind.FunctionDeclaration\r\n      ) {\r\n        this.functionParamExtractor.call(this, node)\r\n      }\r\n\r\n      if (node.kind === ts.SyntaxKind.TaggedTemplateExpression) {\r\n        entry = this.taggedTemplateExpressionExtractor.call(this, node)\r\n      }\r\n\r\n      if (node.kind === ts.SyntaxKind.CallExpression) {\r\n        entry = this.expressionExtractor.call(this, node)\r\n      }\r\n\r\n      if (entry) {\r\n        keys.push(entry)\r\n      }\r\n\r\n      node.forEachChild(parseTree)\r\n    }\r\n\r\n    const sourceFile = ts.createSourceFile(\r\n      filename,\r\n      content,\r\n      ts.ScriptTarget.Latest\r\n    )\r\n    parseTree(sourceFile)\r\n\r\n    return this.setNamespaces(keys)\r\n  }\r\n\r\n  /** @param {ts.FunctionLikeDeclaration} node */\r\n  functionParamExtractor(node) {\r\n    const tFunctionParam =\r\n      node.parameters &&\r\n      node.parameters.find(\r\n        (param) =>\r\n          param.name &&\r\n          param.name.kind === ts.SyntaxKind.Identifier &&\r\n          this.functions.includes(param.name.text)\r\n      )\r\n\r\n    if (\r\n      tFunctionParam &&\r\n      tFunctionParam.type &&\r\n      tFunctionParam.type.typeName &&\r\n      tFunctionParam.type.typeName.text === 'TFunction'\r\n    ) {\r\n      const { typeArguments } = tFunctionParam.type\r\n      if (\r\n        typeArguments &&\r\n        typeArguments.length &&\r\n        typeArguments[0].kind === ts.SyntaxKind.LiteralType\r\n      ) {\r\n        this.defaultNamespace = typeArguments[0].literal.text\r\n      }\r\n    }\r\n  }\r\n\r\n  taggedTemplateExpressionExtractor(node) {\r\n    const entry = {}\r\n\r\n    const { tag, template } = node\r\n\r\n    const isTranslationFunction =\r\n      (tag.text && this.functions.includes(tag.text)) ||\r\n      (tag.name && this.functions.includes(tag.name.text))\r\n\r\n    if (!isTranslationFunction) return null\r\n\r\n    if (template.kind === ts.SyntaxKind.NoSubstitutionTemplateLiteral) {\r\n      entry.key = template.text\r\n    } else if (template.kind === ts.SyntaxKind.TemplateExpression) {\r\n      this.emit(\r\n        'warning',\r\n        'A key that is a template string must not have any interpolations.'\r\n      )\r\n      return null\r\n    }\r\n\r\n    return entry\r\n  }\r\n\r\n  expressionExtractor(node) {\r\n    const entry = {}\r\n\r\n    if (\r\n      this.namespaceFunctions.includes(node.expression.escapedText) &&\r\n      node.arguments.length\r\n    ) {\r\n      const { text, elements } = node.arguments[0]\r\n\r\n      // useTranslation\r\n      if (text) {\r\n        this.defaultNamespace = text\r\n        const optionsArgument = node.arguments[1]\r\n\r\n        if (\r\n          optionsArgument &&\r\n          optionsArgument.kind === ts.SyntaxKind.ObjectLiteralExpression\r\n        ) {\r\n          const node = optionsArgument.properties.find(\r\n            (p) => p.name.escapedText === 'keyPrefix'\r\n          )\r\n          if (node != null) {\r\n            const keyPrefixValue = node.initializer.text\r\n            this.keyPrefix = keyPrefixValue\r\n          }\r\n        }\r\n        // withTranslation\r\n      } else if (elements && elements.length) {\r\n        this.defaultNamespace = elements[0].text\r\n      }\r\n    }\r\n\r\n    const isTranslationFunction =\r\n      (node.expression.text && this.functions.includes(node.expression.text)) ||\r\n      (node.expression.name &&\r\n        this.functions.includes(node.expression.name.text))\r\n\r\n    if (isTranslationFunction) {\r\n      const keyArgument = node.arguments.shift()\r\n\r\n      if (!keyArgument) {\r\n        return null\r\n      }\r\n\r\n      if (\r\n        keyArgument.kind === ts.SyntaxKind.StringLiteral ||\r\n        keyArgument.kind === ts.SyntaxKind.NoSubstitutionTemplateLiteral\r\n      ) {\r\n        entry.key = keyArgument.text\r\n      } else if (keyArgument.kind === ts.SyntaxKind.BinaryExpression) {\r\n        const concatenatedString = this.concatenateString(keyArgument)\r\n        if (!concatenatedString) {\r\n          this.emit(\r\n            'warning',\r\n            `Key is not a string literal: ${keyArgument.text}`\r\n          )\r\n          return null\r\n        }\r\n        entry.key = concatenatedString\r\n      } else {\r\n        this.emit(\r\n          'warning',\r\n          keyArgument.kind === ts.SyntaxKind.Identifier\r\n            ? `Key is not a string literal: ${keyArgument.text}`\r\n            : 'Key is not a string literal'\r\n        )\r\n        return null\r\n      }\r\n\r\n      if (this.parseGenerics && node.typeArguments) {\r\n        let typeArgument = node.typeArguments.shift()\r\n\r\n        const parseTypeArgument = (typeArg) => {\r\n          if (!typeArg) {\r\n            return\r\n          }\r\n          if (typeArg.kind === ts.SyntaxKind.TypeLiteral) {\r\n            for (const member of typeArg.members) {\r\n              entry[member.name.text] = ''\r\n            }\r\n          } else if (\r\n            typeArg.kind === ts.SyntaxKind.TypeReference &&\r\n            typeArg.typeName.kind === ts.SyntaxKind.Identifier\r\n          ) {\r\n            const typeName = typeArg.typeName.text\r\n            if (typeName in this.typeMap) {\r\n              Object.assign(entry, this.typeMap[typeName])\r\n            }\r\n          } else if (Array.isArray(typeArg.types)) {\r\n            typeArgument.types.forEach((tp) => parseTypeArgument(tp))\r\n          }\r\n        }\r\n\r\n        parseTypeArgument(typeArgument)\r\n      }\r\n\r\n      let optionsArgument = node.arguments.shift()\r\n\r\n      // Second argument could be a (concatenated) string default value\r\n      if (\r\n        optionsArgument &&\r\n        (optionsArgument.kind === ts.SyntaxKind.StringLiteral ||\r\n          optionsArgument.kind === ts.SyntaxKind.NoSubstitutionTemplateLiteral)\r\n      ) {\r\n        entry.defaultValue = optionsArgument.text\r\n        optionsArgument = node.arguments.shift()\r\n      } else if (\r\n        optionsArgument &&\r\n        optionsArgument.kind === ts.SyntaxKind.BinaryExpression\r\n      ) {\r\n        const concatenatedString = this.concatenateString(optionsArgument)\r\n        if (!concatenatedString) {\r\n          this.emit(\r\n            'warning',\r\n            `Default value is not a string literal: ${optionsArgument.text}`\r\n          )\r\n          return null\r\n        }\r\n        entry.defaultValue = concatenatedString\r\n        optionsArgument = node.arguments.shift()\r\n      }\r\n\r\n      if (\r\n        optionsArgument &&\r\n        optionsArgument.kind === ts.SyntaxKind.ObjectLiteralExpression\r\n      ) {\r\n        for (const p of optionsArgument.properties) {\r\n          if (p.kind === ts.SyntaxKind.SpreadAssignment) {\r\n            this.emit(\r\n              'warning',\r\n              `Options argument is a spread operator : ${p.expression.text}`\r\n            )\r\n          } else if (p.initializer) {\r\n            if (p.initializer.kind === ts.SyntaxKind.TrueKeyword) {\r\n              entry[p.name.text] = true\r\n            } else if (p.initializer.kind === ts.SyntaxKind.FalseKeyword) {\r\n              entry[p.name.text] = false\r\n            } else {\r\n              entry[p.name.text] = p.initializer.text || ''\r\n            }\r\n          } else {\r\n            entry[p.name.text] = ''\r\n          }\r\n        }\r\n      }\r\n\r\n      if (entry.ns) {\r\n        if (typeof entry.ns === 'string') {\r\n          entry.namespace = entry.ns\r\n        } else if (typeof entry.ns === 'object' && entry.ns.length) {\r\n          entry.namespace = entry.ns[0]\r\n        }\r\n      }\r\n\r\n      return entry\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  commentExtractor(commentText) {\r\n    const regexp = new RegExp(this.callPattern, 'g')\r\n    const expressions = commentText.match(regexp)\r\n\r\n    if (!expressions) {\r\n      return null\r\n    }\r\n\r\n    const keys = []\r\n    expressions.forEach((expression) => {\r\n      const expressionKeys = this.extract(expression)\r\n      if (expressionKeys) {\r\n        keys.push(...expressionKeys)\r\n      }\r\n    })\r\n    return keys\r\n  }\r\n\r\n  concatenateString(binaryExpression, string = '') {\r\n    if (binaryExpression.operatorToken.kind !== ts.SyntaxKind.PlusToken) {\r\n      return\r\n    }\r\n\r\n    if (binaryExpression.left.kind === ts.SyntaxKind.BinaryExpression) {\r\n      string += this.concatenateString(binaryExpression.left, string)\r\n    } else if (binaryExpression.left.kind === ts.SyntaxKind.StringLiteral) {\r\n      string += binaryExpression.left.text\r\n    } else {\r\n      return\r\n    }\r\n\r\n    if (binaryExpression.right.kind === ts.SyntaxKind.BinaryExpression) {\r\n      string += this.concatenateString(binaryExpression.right, string)\r\n    } else if (binaryExpression.right.kind === ts.SyntaxKind.StringLiteral) {\r\n      string += binaryExpression.right.text\r\n    } else {\r\n      return\r\n    }\r\n\r\n    return string\r\n  }\r\n}\r\n"],"mappings":"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"}