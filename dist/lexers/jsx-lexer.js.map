{"version":3,"file":"jsx-lexer.js","names":["JavascriptLexer","ts","unescape","JsxLexer","_JavascriptLexer","_inherits","_super","_createSuper","_this","options","arguments","length","undefined","_classCallCheck","call","componentFunctions","transSupportBasicHtmlNodes","transKeepBasicHtmlNodesFor","omitAttributes","attr","_createClass","key","value","extract","content","_this2","filename","keys","parseCommentNode","createCommentNodeParser","parseTree","node","entry","kind","SyntaxKind","CallExpression","expressionExtractor","TaggedTemplateExpression","taggedTemplateExpressionExtractor","JsxElement","jsxExtractor","JsxSelfClosingElement","push","forEachChild","sourceFile","createSourceFile","ScriptTarget","Latest","keysWithNamespace","setNamespaces","keysWithPrefixes","setKeyPrefixes","sourceText","_this3","tagNode","openingElement","getPropValue","attributeName","_attribute$initialize","attribute","attributes","properties","find","name","text","initializer","expression","Identifier","emit","concat","getKey","includes","tagName","namespace","forEach","property","JsxSpreadAttribute","TrueKeyword","FalseKeyword","defaultsProp","defaultValue","nodeToString","shouldUnescape","defaultNamespace","_this4","children","parseChildren","elemsToString","map","child","index","type","useTagName","isBasic","elementName","childrenString","selfClosing","Error","join","_this5","JsxText","replace","element","escapedText","JsxExpression","AsExpression","StringLiteral","ObjectLiteralExpression","nonFormatProperties","filter","prop","slice","pos","end","default"],"sources":["../../src/lexers/jsx-lexer.js"],"sourcesContent":["import JavascriptLexer from './javascript-lexer.js'\r\nimport ts from 'typescript'\r\nimport { unescape } from '../helpers.js'\r\n\r\nexport default class JsxLexer extends JavascriptLexer {\r\n  constructor(options = {}) {\r\n    super(options)\r\n\r\n    this.componentFunctions = options.componentFunctions || ['Trans']\r\n    this.transSupportBasicHtmlNodes =\r\n      options.transSupportBasicHtmlNodes || false\r\n    this.transKeepBasicHtmlNodesFor = options.transKeepBasicHtmlNodesFor || [\r\n      'br',\r\n      'strong',\r\n      'i',\r\n      'p',\r\n    ]\r\n    this.omitAttributes = [this.attr, 'ns', 'defaults']\r\n  }\r\n\r\n  extract(content, filename = '__default.jsx') {\r\n    const keys = []\r\n\r\n    const parseCommentNode = this.createCommentNodeParser()\r\n\r\n    const parseTree = (node) => {\r\n      let entry\r\n\r\n      parseCommentNode(keys, node, content)\r\n\r\n      switch (node.kind) {\r\n        case ts.SyntaxKind.CallExpression:\r\n          entry = this.expressionExtractor.call(this, node)\r\n          break\r\n        case ts.SyntaxKind.TaggedTemplateExpression:\r\n          entry = this.taggedTemplateExpressionExtractor.call(this, node)\r\n          break\r\n        case ts.SyntaxKind.JsxElement:\r\n          entry = this.jsxExtractor.call(this, node, content)\r\n          break\r\n        case ts.SyntaxKind.JsxSelfClosingElement:\r\n          entry = this.jsxExtractor.call(this, node, content)\r\n          break\r\n      }\r\n\r\n      if (entry) {\r\n        keys.push(entry)\r\n      }\r\n\r\n      node.forEachChild(parseTree)\r\n    }\r\n\r\n    const sourceFile = ts.createSourceFile(\r\n      filename,\r\n      content,\r\n      ts.ScriptTarget.Latest\r\n    )\r\n    parseTree(sourceFile)\r\n\r\n    const keysWithNamespace = this.setNamespaces(keys)\r\n    const keysWithPrefixes = this.setKeyPrefixes(keysWithNamespace)\r\n\r\n    return keysWithPrefixes\r\n  }\r\n\r\n  jsxExtractor(node, sourceText) {\r\n    const tagNode = node.openingElement || node\r\n\r\n    const getPropValue = (node, attributeName) => {\r\n      const attribute = node.attributes.properties.find(\r\n        (attr) => attr.name !== undefined && attr.name.text === attributeName\r\n      )\r\n      if (!attribute) {\r\n        return undefined\r\n      }\r\n\r\n      if (attribute.initializer.expression?.kind === ts.SyntaxKind.Identifier) {\r\n        this.emit(\r\n          'warning',\r\n          `Namespace is not a string literal: ${attribute.initializer.expression.text}`\r\n        )\r\n        return undefined\r\n      }\r\n\r\n      return attribute.initializer.expression\r\n        ? attribute.initializer.expression.text\r\n        : attribute.initializer.text\r\n    }\r\n\r\n    const getKey = (node) => getPropValue(node, this.attr)\r\n\r\n    if (this.componentFunctions.includes(tagNode.tagName.text)) {\r\n      const entry = {}\r\n      entry.key = getKey(tagNode)\r\n\r\n      const namespace = getPropValue(tagNode, 'ns')\r\n      if (namespace) {\r\n        entry.namespace = namespace\r\n      }\r\n\r\n      tagNode.attributes.properties.forEach((property) => {\r\n        if (property.kind === ts.SyntaxKind.JsxSpreadAttribute) {\r\n          this.emit(\r\n            'warning',\r\n            `Component attribute is a JSX spread attribute : ${property.expression.text}`\r\n          )\r\n          return\r\n        }\r\n\r\n        if (this.omitAttributes.includes(property.name.text)) {\r\n          return\r\n        }\r\n\r\n        if (property.initializer) {\r\n          if (property.initializer.expression) {\r\n            if (\r\n              property.initializer.expression.kind === ts.SyntaxKind.TrueKeyword\r\n            ) {\r\n              entry[property.name.text] = true\r\n            } else if (\r\n              property.initializer.expression.kind ===\r\n              ts.SyntaxKind.FalseKeyword\r\n            ) {\r\n              entry[property.name.text] = false\r\n            } else {\r\n              entry[\r\n                property.name.text\r\n              ] = `{${property.initializer.expression.text}}`\r\n            }\r\n          } else {\r\n            entry[property.name.text] = property.initializer.text\r\n          }\r\n        } else entry[property.name.text] = true\r\n      })\r\n\r\n      const defaultsProp = getPropValue(tagNode, 'defaults')\r\n      let defaultValue =\r\n        defaultsProp || this.nodeToString.call(this, node, sourceText)\r\n\r\n      if (entry.shouldUnescape === true) {\r\n        defaultValue = unescape(defaultValue)\r\n      }\r\n\r\n      if (defaultValue !== '') {\r\n        entry.defaultValue = defaultValue\r\n\r\n        if (!entry.key) {\r\n          entry.key = entry.defaultValue\r\n        }\r\n      }\r\n\r\n      return entry.key ? entry : null\r\n    } else if (tagNode.tagName.text === 'Interpolate') {\r\n      const entry = {}\r\n      entry.key = getKey(tagNode)\r\n      return entry.key ? entry : null\r\n    } else if (tagNode.tagName.text === 'Translation') {\r\n      const namespace = getPropValue(tagNode, 'ns')\r\n      if (namespace) {\r\n        this.defaultNamespace = namespace\r\n      }\r\n    }\r\n  }\r\n\r\n  nodeToString(node, sourceText) {\r\n    const children = this.parseChildren.call(this, node.children, sourceText)\r\n\r\n    const elemsToString = (children) =>\r\n      children\r\n        .map((child, index) => {\r\n          switch (child.type) {\r\n            case 'js':\r\n            case 'text':\r\n              return child.content\r\n            case 'tag':\r\n              const useTagName =\r\n                child.isBasic &&\r\n                this.transSupportBasicHtmlNodes &&\r\n                this.transKeepBasicHtmlNodesFor.includes(child.name)\r\n              const elementName = useTagName ? child.name : index\r\n              const childrenString = elemsToString(child.children)\r\n              return childrenString || !(useTagName && child.selfClosing)\r\n                ? `<${elementName}>${childrenString}</${elementName}>`\r\n                : `<${elementName} />`\r\n            default:\r\n              throw new Error('Unknown parsed content: ' + child.type)\r\n          }\r\n        })\r\n        .join('')\r\n\r\n    return elemsToString(children)\r\n  }\r\n\r\n  parseChildren(children = [], sourceText) {\r\n    return children\r\n      .map((child) => {\r\n        if (child.kind === ts.SyntaxKind.JsxText) {\r\n          return {\r\n            type: 'text',\r\n            content: child.text\r\n              .replace(/(^(\\n|\\r)\\s*)|((\\n|\\r)\\s*$)/g, '')\r\n              .replace(/(\\n|\\r)\\s*/g, ' '),\r\n          }\r\n        } else if (\r\n          child.kind === ts.SyntaxKind.JsxElement ||\r\n          child.kind === ts.SyntaxKind.JsxSelfClosingElement\r\n        ) {\r\n          const element = child.openingElement || child\r\n          const name = element.tagName.escapedText\r\n          const isBasic = !element.attributes.properties.length\r\n          return {\r\n            type: 'tag',\r\n            children: this.parseChildren(child.children, sourceText),\r\n            name,\r\n            isBasic,\r\n            selfClosing: child.kind === ts.SyntaxKind.JsxSelfClosingElement,\r\n          }\r\n        } else if (child.kind === ts.SyntaxKind.JsxExpression) {\r\n          // strip empty expressions\r\n          if (!child.expression) {\r\n            return {\r\n              type: 'text',\r\n              content: '',\r\n            }\r\n          }\r\n\r\n          // simplify trivial expressions, like TypeScript typecasts\r\n          if (child.expression.kind === ts.SyntaxKind.AsExpression) {\r\n            child = child.expression\r\n          }\r\n\r\n          if (child.expression.kind === ts.SyntaxKind.StringLiteral) {\r\n            return {\r\n              type: 'text',\r\n              content: child.expression.text,\r\n            }\r\n          }\r\n\r\n          // strip properties from ObjectExpressions\r\n          // annoying (and who knows how many other exceptions we'll need to write) but necessary\r\n          else if (\r\n            child.expression.kind === ts.SyntaxKind.ObjectLiteralExpression\r\n          ) {\r\n            // i18next-react only accepts two props, any random single prop, and a format prop\r\n            // for our purposes, format prop is always ignored\r\n\r\n            let nonFormatProperties = child.expression.properties.filter(\r\n              (prop) => prop.name.text !== 'format'\r\n            )\r\n\r\n            // more than one property throw a warning in i18next-react, but still works as a key\r\n            if (nonFormatProperties.length > 1) {\r\n              this.emit(\r\n                'warning',\r\n                `The passed in object contained more than one variable - the object should look like {{ value, format }} where format is optional.`\r\n              )\r\n\r\n              return {\r\n                type: 'text',\r\n                content: '',\r\n              }\r\n            }\r\n\r\n            return {\r\n              type: 'js',\r\n              content: `{{${nonFormatProperties[0].name.text}}}`,\r\n            }\r\n          }\r\n\r\n          // slice on the expression so that we ignore comments around it\r\n          return {\r\n            type: 'js',\r\n            content: `{${sourceText.slice(\r\n              child.expression.pos,\r\n              child.expression.end\r\n            )}}`,\r\n          }\r\n        } else {\r\n          throw new Error('Unknown ast element when parsing jsx: ' + child.kind)\r\n        }\r\n      })\r\n      .filter((child) => child.type !== 'text' || child.content)\r\n  }\r\n}\r\n"],"mappings":"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"}