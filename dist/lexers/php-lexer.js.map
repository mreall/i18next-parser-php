{"version":3,"file":"php-lexer.js","names":["_classCallCheck","_createClass","_inherits","_possibleConstructorReturn","_getPrototypeOf","_typeof","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","Reflect","construct","arguments","apply","sham","Proxy","Boolean","valueOf","path","Engine","BaseLexer","parser","objectHas","obj","key","hasOwnProperty","PhpLexer","_BaseLexer","_super","_this","options","undefined","functions","translations","comments","extract","content","filename","ast","parseCode","parseCodeTree","emit","concat","message","_iterator","_step","comment","parseComment","_iterator2","_step2","child","methodName","validFunctionCall","validArgs","_args$1$ns","args","parseArguments","namespace","ns","defaultNamespace","translationCall","method","push","childrenContainingCalls","_i","_childrenContainingCa","commentAst","commentRegexp","kind","RegExp","commentKeyword","commentParts","exec","lineNumber","loc","end","line","column","what","offset","join","resolution","replace","indexOf","argsArray","_iterator3","_step3","arg","getNameValue","items","forEach","item","getComment","linesWithComment","keys","addTranslation","translationObject","generateTranslationObject","contextPosition","contextKey","getContextPos","default"],"sources":["../../src/lexers/php-lexer.js"],"sourcesContent":["'use strict';\r\n\r\nimport path from 'path';\r\nimport Engine from 'php-parser';\r\nimport BaseLexer from './base-lexer.js'\r\n\r\nconst parser = new Engine;\r\n\r\nfunction objectHas(obj, key) {\r\n  if (!obj || typeof obj !== 'object') return false;\r\n  return Object.prototype.hasOwnProperty.call(obj, key);\r\n}\r\n\r\n/**\r\n * Parse a PHP file. Adapted from wp-pot.\r\n * @see https://github.com/wp-pot/wp-pot/blob/master/src/parsers/php-parser.js\r\n */\r\nexport default class PhpLexer extends BaseLexer {\r\n  constructor(options = {}) {\r\n    super(options);\r\n\r\n    this.functions = options.functions || ['I18n::t', 'I18n::e'];\r\n    this.options = options;\r\n    this.translations = [];\r\n    this.comments = {};\r\n  }\r\n\r\n  extract(content, filename) {\r\n    try {\r\n      const ast = parser.parseCode(content, filename);\r\n      this.parseCodeTree(ast, filename);\r\n    } catch (e) {\r\n      this.emit('warning', `Error parsing \"${filename}\": ${e.message}`);\r\n    }\r\n\r\n    return this.translations;\r\n  }\r\n\r\n  /**\r\n   * Parse the AST code tree\r\n  *\r\n  * @param {object} ast\r\n  * @param {string} filename\r\n  */\r\n  parseCodeTree(ast, filename) {\r\n    if (!ast) {\r\n      return;\r\n    }\r\n\r\n    if (ast.comments) {\r\n      for (const comment of ast.comments) {\r\n        this.parseComment(comment);\r\n      }\r\n    }\r\n\r\n    if (Array.isArray(ast)) {\r\n      for (const child of ast) {\r\n        this.parseCodeTree(child, filename);\r\n      }\r\n      return;\r\n    }\r\n\r\n    const methodName = this.validFunctionCall(ast);\r\n\r\n    if (methodName) {\r\n      if (this.validArgs(ast.arguments)) {\r\n        const args = this.parseArguments(ast.arguments);\r\n        const namespace = args[1].ns ?? this.options.defaultNamespace;\r\n        const translationCall = {\r\n          args,\r\n          filename,\r\n          method: methodName,\r\n          namespace,\r\n          key: args[0]\r\n        };\r\n\r\n        if (args[1].default) {\r\n          translationCall['defaultValue'] = args[1].default;\r\n        }\r\n\r\n        this.translations.push(translationCall);\r\n        //this.addTranslation(translationCall);\r\n      }\r\n    } else {\r\n      // List can not be in alphabetic order, otherwise it will not be ordered by occurence in code.\r\n      const childrenContainingCalls = [\r\n        'arguments',\r\n        'alternate',\r\n        'body',\r\n        'catches',\r\n        'children',\r\n        'expr',\r\n        'expression',\r\n        'expressions',\r\n        'trueExpr',\r\n        'falseExpr',\r\n        'items',\r\n        'key',\r\n        'left',\r\n        'right',\r\n        'value',\r\n        'what'\r\n      ];\r\n\r\n      for (const child of childrenContainingCalls) {\r\n        if (ast[child]) {\r\n          this.parseCodeTree(ast[child], filename);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parse comment AST\r\n   *\r\n   * @param  {object} commentAst\r\n   */\r\n  parseComment(commentAst) {\r\n    let commentRegexp;\r\n    if (commentAst.kind === 'commentblock') {\r\n      commentRegexp = new RegExp(`(?:\\\\/\\\\*)?[\\\\s*]*${this.options.commentKeyword}(.*)\\\\s*(?:\\\\*\\\\/)$`, 'im');\r\n    } else {\r\n      commentRegexp = new RegExp(`^\\\\/\\\\/\\\\s*${this.options.commentKeyword}(.*)$`, 'im');\r\n    }\r\n    const commentParts = commentRegexp.exec(commentAst.value);\r\n\r\n    if (commentParts) {\r\n      let lineNumber = commentAst.loc.end.line;\r\n      if (commentAst.loc.end.column === 0) {\r\n        lineNumber--;\r\n      }\r\n\r\n      this.comments[lineNumber] = commentParts[1];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if ast is a valid function call\r\n   *\r\n   * @param {object} ast\r\n   *\r\n   * @return {string|null}\r\n   */\r\n  validFunctionCall(ast) {\r\n    if (ast.kind === 'call') {\r\n      let methodName = ast.what.name;\r\n\r\n      if (ast.what.kind === 'propertylookup' && ast.what.what.kind === 'variable') {\r\n        methodName = ['$', ast.what.what.name, '->', ast.what.offset.name].join('');\r\n      } else if (ast.what.kind === 'name' && ast.what.resolution === 'fqn') {\r\n        methodName = ast.what.name.replace(/^\\\\/, '');\r\n      } else if (ast.what.kind === 'staticlookup' && ast.what.what.resolution === 'uqn') {\r\n        methodName = [ast.what.what.name, '::', ast.what.offset.name].join('');\r\n      }\r\n\r\n      if (this.functions.indexOf(methodName) !== -1) {\r\n        return methodName;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Parse arguments in a function call\r\n   *\r\n   * @param {Array} args\r\n   *\r\n   * @return {Array}\r\n   */\r\n  parseArguments(args) {\r\n    const argsArray = [];\r\n    for (const arg of args) {\r\n      if (arg.kind === 'propertylookup') {\r\n        argsArray.push(`$${arg.what.name}->${arg.offset.name}`);\r\n      } else if (arg.kind === 'staticlookup') {\r\n        argsArray.push(`$${arg.what.name}::${arg.offset.name}`);\r\n      } else if (arg.kind === 'variable') {\r\n        argsArray.push(`$${arg.name}`);\r\n      } else if (arg.kind === 'name' && arg.resolution === 'uqn') {\r\n        argsArray.push(arg.name);\r\n      } else if (arg.kind === 'array') {\r\n        argsArray.push(this.getNameValue(arg.items));\r\n      } else {\r\n        argsArray.push(arg.value);\r\n      }\r\n    }\r\n\r\n    if (!argsArray[1]) {\r\n      argsArray[1] = [];\r\n    }\r\n\r\n    return argsArray;\r\n  }\r\n\r\n  validArgs(args) {\r\n    if (args[0] && args[0].kind !== 'string') {\r\n      return false;\r\n    }\r\n\r\n    if (args[1] && args[1].kind !== 'array') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  getNameValue(items) {\r\n    const options = [];\r\n    items.forEach(item => {\r\n      if (item.key.kind === 'string' && item.value.kind === 'string') {\r\n        options[item.key.value] = item.value.value;\r\n      }\r\n    });\r\n    return options;\r\n  }\r\n\r\n  getComment(lineNumber) {\r\n    const linesWithComment = Object.keys(this.comments);\r\n    if (!linesWithComment) {\r\n      return null;\r\n    }\r\n\r\n    if (linesWithComment[0] > lineNumber) {\r\n      return null;\r\n    }\r\n\r\n    let comment;\r\n    if (lineNumber - linesWithComment[0] > 2) {\r\n      delete this.comments[linesWithComment[0]];\r\n      comment = this.getComment(lineNumber);\r\n    } else {\r\n      comment = this.comments[linesWithComment[0]];\r\n      delete this.comments[linesWithComment[0]];\r\n    }\r\n\r\n    if (comment) {\r\n      comment = comment.replace(/\\s+$/, '');\r\n    }\r\n\r\n    return comment;\r\n  }\r\n\r\n  /**\r\n   * Add translation call to array\r\n   *\r\n   * @param {object} translationCall\r\n   */\r\n  addTranslation(translationCall) {\r\n    if (translationCall.args) {\r\n      const translationObject = this.generateTranslationObject(translationCall);\r\n\r\n      if (!this.translations[translationObject.key]) {\r\n        this.translations[translationObject.key] = translationObject.value;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate an object for a translation\r\n   *\r\n   * @param {object} translationCall\r\n   * @return {object}\r\n   */\r\n  generateTranslationObject(translationCall) {\r\n    const translationObject = {\r\n      key: translationCall.args[0],\r\n      value: null\r\n    }\r\n\r\n    if (objectHas(this.functions.contextPosition, translationCall.method)) {\r\n      const contextKey = this.getContextPos(translationCall.method);\r\n      translationObject.value = translationCall.args[contextKey];\r\n    }\r\n\r\n    return translationObject;\r\n  }\r\n\r\n  /**\r\n   * Get context argument position\r\n   *\r\n   * @param {string} method\r\n   *\r\n   * @return {number}\r\n   */\r\n  getContextPos(method) {\r\n    return this.functions.contextPosition[method] - 1;\r\n  }\r\n}\r\n"],"mappings":"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"}